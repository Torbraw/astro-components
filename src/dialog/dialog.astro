---
import { twMerge } from 'tailwind-merge';
import type { HTMLAttributes } from 'astro/types';

type Props = HTMLAttributes<'dialog'> & {
  dialogId: string;
};
const { class: className = '', dialogId } = Astro.props;
---

<astro-dialog data-dialog-id={dialogId}>
  <dialog
    id={dialogId}
    class={twMerge(
      'bg-background text-primary border shadow-lg sm:rounded-lg backdrop:bg-background/80 w-full max-w-lg backdrop:backdrop-blur-sm open:backdrop:animate-in open:backdrop:fade-out-0 m-0 left-[50%] top-[50%] translate-x-[-50%] translate-y-[-50%] duration-200 open:animate-in data-[closed=true]:animate-out data-[closed=true]:fade-out-0 open:fade-in-0 data-[closed=true]:zoom-out-95 open:zoom-in-95 data-[closed=true]:slide-out-to-left-1/2 data-[closed=true]:slide-out-to-top-[48%] open:slide-in-from-left-1/2 open:slide-in-from-top-[48%]',
      className,
    )}
    {...Astro.props}
  >
    <slot />
  </dialog>
</astro-dialog>

<script>
  class AstroDialog extends HTMLElement {
    constructor() {
      super();
      const dialogId = this.dataset.dialogId as string;
      const dialog = document.getElementById(dialogId) as HTMLDialogElement;
      const btn = dialog.querySelector(`#close-btn-${dialogId}`) as HTMLButtonElement;

      dialog.addEventListener('webkitAnimationEnd', () => {
        if (dialog.dataset.closed === 'true') {
          dialog.dataset.closed = 'false';
          dialog.close();
        }
      });

      btn.addEventListener('click', () => {
        dialog.dataset.closed = 'true';
      });

      dialog.addEventListener('click', (event) => {
        if (event.target === dialog) {
          dialog.dataset.closed = 'true';
        }
      });

      dialog.addEventListener('cancel', (event) => {
        event.preventDefault();
        dialog.dataset.closed = 'true';
      });
    }
  }

  customElements.define('astro-dialog', AstroDialog);
</script>
